<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:jms="http://www.springframework.org/schema/jms" 
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd    
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd    
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd    
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.1.xsd    
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd    
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd    
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.1.xsd    
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd    
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- task任务扫描注解 -->
	<task:annotation-driven/>

	<!-- 扫描注解配置文件spring，注解Controller是在config/spring/spring-servlet.xml中配置 -->
	<context:component-scan base-package="com.qingpu.common" />
	<context:component-scan base-package="com.qingpu.user" />
	<context:component-scan base-package="com.qingpu.goods" />
	<context:component-scan base-package="com.qingpu.robots" />
	<context:component-scan base-package="com.qingpu.adtemplate" />
	<context:component-scan base-package="com.qingpu.socketservice" />
	
	<context:component-scan base-package="asr.qingpu.user" />
	<context:component-scan base-package="asr.qingpu.wavfile" />
	
	<!-- 导入外部配置文件配置数据库 -->
	<context:property-placeholder
		location="classpath:/config/properties/jdbc.properties"
		ignore-unresolvable="true" />
	<!-- 配置数据源C3P0 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driverClass}"></property>
		<property name="jdbcUrl" value="${jdbcUrl}"></property>
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3" />
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="1" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="2" />
		<property name="maxStatements" value="0" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60" />
		<property name="autoCommitOnClose" value="false"/>
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="breakAfterAcquireFailure"  value="true"/>
		<property name="testConnectionOnCheckout" value="false" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
	</bean>
	<!-- 使用注解的方式来创建数据表,如果使用LocalSessionFactoryBean表示使用bean类+xml配置的方式 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>				
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<!-- ORM实体包扫描，自动在数据库中创建数据表 -->
		<property name="packagesToScan">
			<list>
				<value>com.qingpu.user.entity</value>
				<value>com.qingpu.goods.entity</value>
				<value>com.qingpu.robots.entity</value>
				<value>com.qingpu.adtemplate.entity</value>
				
				<value>asr.qingpu.user.entity</value>
				<value>asr.qingpu.wavfile.entity</value>
			</list>
		</property>
	</bean>
	
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>			
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/><!-- 如果存在一个事务，则支持当前事务。如果没有事务则开启 -->
		   	<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		   	<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		   	<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		   	<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		   	<tx:method name="find*" propagation="SUPPORTS" read-only="true" />		   	
		</tx:attributes>
	</tx:advice>
	<aop:config> <!-- 将dao层直接加入事务，对于比较简单的业务流程而言，免去了不停写service层的麻烦 -->
		<aop:pointcut id="weixinService"
			expression="(execution(* asr.qingpu.wavfile.dao.*.*(..))) or (execution(* asr.qingpu.user.dao.*.*(..))) or (execution(* com.qingpu.adtemplate.dao.*.*(..))) or (execution(* com.qingpu.robots.dao.*.*(..))) or (execution(* com.qingpu.common.service.*.*(..))) or (execution(* com.qingpu.user.service.*.*(..))) or (execution(* com.qingpu.goods.service.*.*(..)))"></aop:pointcut>
		<aop:advisor pointcut-ref="weixinService" advice-ref="txAdvice"/>
	</aop:config>
		
	<bean id="handlerExceptionResolver" class="com.qingpu.common.service.MyHandlerExceptionResolver"></bean><!-- 注册异常处理器 -->	
	
 	<!-- 导入外部配置文件 -->
 	
</beans>	